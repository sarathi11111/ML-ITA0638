import numpy as np

def knn(train_data, train_labels, test_point, k):
    # Calculate Euclidean distances between test point and all training points
    distances = np.sqrt(np.sum((train_data - test_point)**2, axis=1))

    # Sort by distance and select k nearest neighbors
    nearest_neighbors = np.argsort(distances)[:k]

    # Get the labels of the k nearest neighbors
    nearest_labels = train_labels[nearest_neighbors]

    # Return the most frequent label among the k nearest neighbors
    return np.argmax(np.bincount(nearest_labels))

# Example usage
train_data = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
train_labels = np.array([0, 1, 1, 0])
test_point = np.array([0.5, 0.5])
k = 3

predicted_label = knn(train_data, train_labels, test_point, k)
print("Predicted Label:", predicted_label)
